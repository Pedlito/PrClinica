@model BD_PR_01_Clinicas.Models.RegisterViewModel

@{
    ViewBag.Title = "Crear usuario";
}

<h2>Crear usuario</h2>


@using (Html.BeginForm("CrearUsuario", "Usuario", FormMethod.Post, new { @id = "formUsuario", @class = "form-horizontal", role = "form" } ))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.Label("Rol", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 entrada">
                @*@Html.DropDownList("codTipoUsuario", null, "Seleccione un rol", htmlAttributes: new { @class = "form-control col-md-3", onchange = "mostrarD(this.value)" })*@
                @Html.DropDownListFor(m=>m.selectedRol,new SelectList(Model.roles, "codTipoUsuario", "Rol"),null,htmlAttributes:new { @class = "form-control col-md-3", onchange = "mostrarD(this.value)" })
            </div>
        </div> 

        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 entrada">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("DPI", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 entrada">
                @Html.EditorFor(model => model.Dpi, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Dpi, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Carnet, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10 entrada" id="carne">
                @Html.EditorFor(model => model.Carnet, new { htmlAttributes = new { @class = "form-control", @disabled = false } })
                @Html.ValidationMessageFor(model => model.Carnet, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model=>model.FechaNacimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 entrada">
                @Html.TextBoxFor(model => model.FechaNacimiento, "", new { @class = "form-control", @ReadOnly = true })
                @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
            </div>
        </div>
     
        <div class="form-group">
            @Html.LabelFor(model => model.Usuario, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 entrada">
                @Html.EditorFor(model => model.Usuario, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Usuario, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 entrada">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Repita su contraseña", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 entrada">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-1">
                <button type="submit" class="btn btn-success">
                    <span class="glyphicon glyphicon-user"></span> Crear
                </button>
            </div>
            <div class="col-md-9">
                <a class="btn btn-primary" href="@Url.Action("Index")">
                    <span class="glyphicon glyphicon-arrow-left"></span> Regresar
                </a>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $("#FechaNacimiento").datepicker({
        changeMonth: true,
        changeYear: true,
        autoclose: true,
        yearRange: '-80:-17',
        dateFormat: 'dd/mm/yy'
    });

    $("#FechaNacimiento").val("");

    function mostrarD() {
        var valor = $("#selectedRol").val();

        if (valor == 2) {
            $("#Carnet").prop('disabled', false)

        }
        else {
            $('#carne').children('.help-block').html("");
            $("#Carnet").closest('.entrada').removeClass('has-success has-error');
            $("#Carnet").html();
            $("#Carnet").prop('disabled', true);
            $("#Carnet").val("")
        }
    }
    $.validator.addMethod("soloNumeros", function (value, element) {
        return /^[0-9]+$/i.test(value);
    }, "Ingrese sólo numeros");

    $.validator.addMethod("soloLetras", function (value, element) {
        return /^[a-zA-Z ]+$/i.test(value);
    }, "Ingrese sólo Letras");

    $.validator.addMethod("alfanumerico", function (value, element) {
        return /^[a-zA-Z0-9 ]+$/i.test(value);
    }, "Ingrese sólo Letras, numeros solo al final, sin espacios");

    $("#formUsuario").validate({

        errorClass: 'help-block',
        errorElement: 'div',
        errorPlacement: function (error, e) {
            e.parents('.entrada').append(error);
        },
        highlight: function (e) {

            $(e).closest('.entrada').removeClass('has-success has-error').addClass('has-error');
            $(e).closest('.help-block').remove();

        },
        success: function (e) {
            e.closest('.entrada').removeClass('has-success has-error');
            e.closest('.help-block').remove();

        },

        rules: {
            codTipoUsuario: { required: true },
            Nombre: { required: true, soloLetras: true, minlength: 3 },
            Dpi: { required: true, soloNumeros: true, minlength: true},
            Carnet: { required: true, soloNumeros: true, minlength: 8 },
            FechaNacimiento: { required: true },
            Usuario: { required: true, minlength: 3, alfanumerico: true, noRepetidos: true },
            Password: { required: true, minlength: 4 },
            ConfirmPassword: { required: true, equalTo: '#password' }

        },
        messages: {
            codTipoUsuario: {
                required: "Debe seleccionar un rol"
            },
            Nombre: {
                required: "Debe introducir su nombre",
                minlength: "Tres caracteres como minimo"
            },

            Dpi: {
                required: "Debe introducir un numero de identificacion",
                minlength: "12 caracteres minimo"
            },
            Carnet: {
                required: "Debe introducir un numero de identificacion",
                minlength: "8 caracteres minimo"
            },
            FechaNacimiento: "Fecha nacimiento requerida",

            Usuario: {
                required: "Debe introducir un nombre de usuario",
                minlength: "3 caracteres como minimo"
            },
            Password: {
                required: "Debe introducir una contraseña",
                minlength: "4 caracteres como minimo"
            },
            ConfirmPassword: {
                required: "Repita su contraseña",
                equalTo: "Las contraseñas no coinciden"
            }

        }
    });

</script>
}
